{"version":3,"sources":["App.js","logo.svg","serviceWorker.js","index.js"],"names":["App","props","state","value","handleChange","bind","handleSubmit","addNumber","clear","removeLast","downloadTxtFile","event","this","setState","target","preventDefault","result","eval","a","substring","length","element","document","createElement","file","Blob","getElementById","innerHTML","type","href","URL","createObjectURL","download","body","appendChild","click","className","src","logo","alt","onSubmit","id","onChange","readOnly","onClick","React","Component","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c11ca465.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.addNumber = this.addNumber.bind(this);\n    this.clear = this.clear.bind(this);\n    this.removeLast = this.removeLast.bind(this);\n    this.downloadTxtFile = this.downloadTxtFile.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    try {\n      this.setState({ result: eval(this.state.value) });\n    } catch {\n      this.setState({ result: \"Invalid input\" });\n    }\n  }\n\n  addNumber(a) {\n    this.setState({ value: this.state.value + \"\" + a });\n  }\n\n  clear() {\n    this.setState({ value: \"\" });\n  }\n  removeLast() {\n    this.setState({\n      value: this.state.value.substring(0, this.state.value.length - 1),\n    });\n  }\n\n  downloadTxtFile() {\n    const element = document.createElement(\"a\");\n    const file = new Blob([document.getElementById('result').innerHTML],    \n                {type: 'text/plain;charset=utf-8'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"myFile.txt\";\n    document.body.appendChild(element);\n    element.click();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <form onSubmit={this.handleSubmit}>\n            <input\n              id=\"input\"\n              type=\"text\"\n              value={this.state.value}\n              onChange={this.handleChange}\n              readOnly={true}\n            />\n            <input type=\"submit\" value=\"Calculate\" />\n          </form>\n          <div>\n            <button onClick={() => this.clear()}>AC</button>\n            <button onClick={() => this.removeLast()}>&lt;</button>\n            <button onClick={() => this.addNumber(\"/\")}>/</button>\n          </div>\n          <div>\n            <button onClick={() => this.addNumber(1)}>1</button>\n            <button onClick={() => this.addNumber(2)}>2</button>\n            <button onClick={() => this.addNumber(3)}>3</button>\n            <button onClick={() => this.addNumber(\"*\")}>*</button>\n          </div>\n          <div>\n            <button onClick={() => this.addNumber(4)}>4</button>\n            <button onClick={() => this.addNumber(5)}>5</button>\n            <button onClick={() => this.addNumber(6)}>6</button>\n            <button onClick={() => this.addNumber(\"-\")}>-</button>\n          </div>\n          <div>\n            <button onClick={() => this.addNumber(7)}>7</button>\n            <button onClick={() => this.addNumber(8)}>8</button>\n            <button onClick={() => this.addNumber(9)}>9</button>\n            <button onClick={() => this.addNumber(\"+\")}>+</button>\n          </div>\n          <div>\n            <button onClick={() => this.addNumber(\"(\")}>(</button>\n            <button onClick={() => this.addNumber(0)}>0</button>\n            <button onClick={() => this.addNumber(\")\")}>)</button>\n            <button onClick={this.handleSubmit}>=</button>\n          </div>\n          <button onClick={this.downloadTxtFile}>Export results</button>\n          <label id=\"result\">{this.state.result}</label>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}